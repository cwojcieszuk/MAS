// <auto-generated />
using System;
using MAS.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MAS.Backend.Data.Migrations
{
    [DbContext(typeof(MasContext))]
    [Migration("20230604135802_AddedTransactionsAndLogin")]
    partial class AddedTransactionsAndLogin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MAS.Backend.Entities.Account", b =>
                {
                    b.Property<int>("IdAccount")
                        .HasColumnType("int");

                    b.Property<string>("BankAccount")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<double>("Money")
                        .HasColumnType("float");

                    b.HasKey("IdAccount")
                        .HasName("Account_pk");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("MAS.Backend.Entities.Address", b =>
                {
                    b.Property<int>("IdAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAddress"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.HasKey("IdAddress")
                        .HasName("Address_pk");

                    b.HasIndex("IdUser");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("MAS.Backend.Entities.Admin", b =>
                {
                    b.Property<int>("IdAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("IdAdmin")
                        .HasName("Admin_pk");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("MAS.Backend.Entities.Bet", b =>
                {
                    b.Property<int>("IdBet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBet"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdBetEsport")
                        .HasColumnType("int");

                    b.Property<int?>("IdBetSport")
                        .HasColumnType("int");

                    b.HasKey("IdBet")
                        .HasName("Bet_pk");

                    b.HasIndex("IdBetEsport");

                    b.HasIndex("IdBetSport");

                    b.ToTable("Bet", (string)null);

                    b.HasData(
                        new
                        {
                            IdBet = 1,
                            Date = new DateTime(2023, 5, 18, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            IdBetSport = 1
                        },
                        new
                        {
                            IdBet = 2,
                            Date = new DateTime(2023, 5, 18, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            IdBetSport = 2
                        },
                        new
                        {
                            IdBet = 3,
                            Date = new DateTime(2023, 5, 18, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            IdBetSport = 3
                        },
                        new
                        {
                            IdBet = 4,
                            Date = new DateTime(2023, 5, 18, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            IdBetSport = 4
                        },
                        new
                        {
                            IdBet = 5,
                            Date = new DateTime(2023, 5, 18, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            IdBetEsport = 1
                        },
                        new
                        {
                            IdBet = 6,
                            Date = new DateTime(2023, 5, 18, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            IdBetEsport = 2
                        },
                        new
                        {
                            IdBet = 7,
                            Date = new DateTime(2023, 5, 18, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            IdBetEsport = 3
                        });
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetCoupon", b =>
                {
                    b.Property<int>("IdBetCoupon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBetCoupon"));

                    b.Property<int>("IdCoupon")
                        .HasColumnType("int");

                    b.Property<int?>("IdBetEsportOption")
                        .HasColumnType("int");

                    b.Property<int?>("IdBetSportOption")
                        .HasColumnType("int");

                    b.HasKey("IdBetCoupon", "IdCoupon")
                        .HasName("BetCoupon_pk");

                    b.HasIndex("IdBetEsportOption");

                    b.HasIndex("IdBetSportOption");

                    b.HasIndex("IdCoupon");

                    b.ToTable("BetCoupon", (string)null);
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetEsport", b =>
                {
                    b.Property<int>("IdBetEsport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBetEsport"));

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Team1")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Team2")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.HasKey("IdBetEsport")
                        .HasName("BetEsport_pk");

                    b.ToTable("BetEsport", (string)null);

                    b.HasData(
                        new
                        {
                            IdBetEsport = 1,
                            GameName = "CS:GO",
                            Team1 = "FaZe Clan",
                            Team2 = "Virtus Pro"
                        },
                        new
                        {
                            IdBetEsport = 2,
                            GameName = "CS:GO",
                            Team1 = "NIP",
                            Team2 = "Vitality"
                        },
                        new
                        {
                            IdBetEsport = 3,
                            GameName = "CS:GO",
                            Team1 = "Cloud9",
                            Team2 = "G2"
                        });
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetEsportOption", b =>
                {
                    b.Property<int>("IdBetEsportOption")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBetEsportOption"));

                    b.Property<int>("IdBetEsport")
                        .HasColumnType("int");

                    b.Property<int>("IdBetEsportType")
                        .HasColumnType("int");

                    b.Property<int>("IdBetStatus")
                        .HasColumnType("int");

                    b.Property<float>("Odds")
                        .HasColumnType("real");

                    b.HasKey("IdBetEsportOption")
                        .HasName("BetEsportOption_pk");

                    b.HasIndex("IdBetEsport");

                    b.HasIndex("IdBetEsportType");

                    b.HasIndex("IdBetStatus");

                    b.ToTable("BetEsportOption", (string)null);

                    b.HasData(
                        new
                        {
                            IdBetEsportOption = 1,
                            IdBetEsport = 1,
                            IdBetEsportType = 1,
                            IdBetStatus = 1,
                            Odds = 1.5f
                        },
                        new
                        {
                            IdBetEsportOption = 2,
                            IdBetEsport = 1,
                            IdBetEsportType = 3,
                            IdBetStatus = 1,
                            Odds = 5.1f
                        },
                        new
                        {
                            IdBetEsportOption = 3,
                            IdBetEsport = 1,
                            IdBetEsportType = 2,
                            IdBetStatus = 1,
                            Odds = 2.9f
                        },
                        new
                        {
                            IdBetEsportOption = 4,
                            IdBetEsport = 2,
                            IdBetEsportType = 1,
                            IdBetStatus = 1,
                            Odds = 1.8f
                        },
                        new
                        {
                            IdBetEsportOption = 5,
                            IdBetEsport = 2,
                            IdBetEsportType = 3,
                            IdBetStatus = 1,
                            Odds = 2.5f
                        },
                        new
                        {
                            IdBetEsportOption = 6,
                            IdBetEsport = 2,
                            IdBetEsportType = 2,
                            IdBetStatus = 1,
                            Odds = 6.7f
                        },
                        new
                        {
                            IdBetEsportOption = 7,
                            IdBetEsport = 3,
                            IdBetEsportType = 1,
                            IdBetStatus = 1,
                            Odds = 2.5f
                        },
                        new
                        {
                            IdBetEsportOption = 8,
                            IdBetEsport = 3,
                            IdBetEsportType = 3,
                            IdBetStatus = 1,
                            Odds = 6f
                        },
                        new
                        {
                            IdBetEsportOption = 9,
                            IdBetEsport = 3,
                            IdBetEsportType = 2,
                            IdBetStatus = 1,
                            Odds = 1.15f
                        });
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetEsportType", b =>
                {
                    b.Property<int>("IdBetEsportType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBetEsportType"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.HasKey("IdBetEsportType")
                        .HasName("BetEsportType_pk");

                    b.ToTable("BetEsportType", (string)null);

                    b.HasData(
                        new
                        {
                            IdBetEsportType = 1,
                            Name = "Wygra 1 drużyna"
                        },
                        new
                        {
                            IdBetEsportType = 2,
                            Name = "Wygra 2 drużyna"
                        },
                        new
                        {
                            IdBetEsportType = 3,
                            Name = "Remis"
                        });
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetSport", b =>
                {
                    b.Property<int>("IdBetSport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBetSport"));

                    b.Property<string>("SportName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Team1")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Team2")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.HasKey("IdBetSport")
                        .HasName("BetSport_pk");

                    b.ToTable("BetSport", (string)null);

                    b.HasData(
                        new
                        {
                            IdBetSport = 1,
                            SportName = "Piłka nożna",
                            Team1 = "Manchester United",
                            Team2 = "Manchester City"
                        },
                        new
                        {
                            IdBetSport = 2,
                            SportName = "Piłka nożna",
                            Team1 = "Arsenal",
                            Team2 = "Liverpool"
                        },
                        new
                        {
                            IdBetSport = 3,
                            SportName = "Piłka nożna",
                            Team1 = "Fc Barcelona",
                            Team2 = "Real Madryt"
                        },
                        new
                        {
                            IdBetSport = 4,
                            SportName = "Piłka nożna",
                            Team1 = "PSG",
                            Team2 = "Bayern Monachium"
                        });
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetSportOption", b =>
                {
                    b.Property<int>("IdBetSportOption")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBetSportOption"));

                    b.Property<int>("IdBetSport")
                        .HasColumnType("int");

                    b.Property<int>("IdBetSportType")
                        .HasColumnType("int");

                    b.Property<int>("IdBetStatus")
                        .HasColumnType("int");

                    b.Property<float>("Odds")
                        .HasColumnType("real");

                    b.HasKey("IdBetSportOption")
                        .HasName("BetSportOption_pk");

                    b.HasIndex("IdBetSport");

                    b.HasIndex("IdBetSportType");

                    b.HasIndex("IdBetStatus");

                    b.ToTable("BetSportOption", (string)null);

                    b.HasData(
                        new
                        {
                            IdBetSportOption = 1,
                            IdBetSport = 1,
                            IdBetSportType = 1,
                            IdBetStatus = 1,
                            Odds = 1.3f
                        },
                        new
                        {
                            IdBetSportOption = 2,
                            IdBetSport = 1,
                            IdBetSportType = 3,
                            IdBetStatus = 1,
                            Odds = 1.6f
                        },
                        new
                        {
                            IdBetSportOption = 3,
                            IdBetSport = 1,
                            IdBetSportType = 2,
                            IdBetStatus = 1,
                            Odds = 2.5f
                        },
                        new
                        {
                            IdBetSportOption = 4,
                            IdBetSport = 2,
                            IdBetSportType = 1,
                            IdBetStatus = 1,
                            Odds = 1.4f
                        },
                        new
                        {
                            IdBetSportOption = 5,
                            IdBetSport = 2,
                            IdBetSportType = 3,
                            IdBetStatus = 1,
                            Odds = 2.4f
                        },
                        new
                        {
                            IdBetSportOption = 6,
                            IdBetSport = 2,
                            IdBetSportType = 2,
                            IdBetStatus = 1,
                            Odds = 2.5f
                        },
                        new
                        {
                            IdBetSportOption = 7,
                            IdBetSport = 3,
                            IdBetSportType = 1,
                            IdBetStatus = 1,
                            Odds = 1.9f
                        },
                        new
                        {
                            IdBetSportOption = 8,
                            IdBetSport = 3,
                            IdBetSportType = 3,
                            IdBetStatus = 1,
                            Odds = 4f
                        },
                        new
                        {
                            IdBetSportOption = 9,
                            IdBetSport = 3,
                            IdBetSportType = 2,
                            IdBetStatus = 1,
                            Odds = 1.19f
                        },
                        new
                        {
                            IdBetSportOption = 10,
                            IdBetSport = 4,
                            IdBetSportType = 1,
                            IdBetStatus = 1,
                            Odds = 19f
                        },
                        new
                        {
                            IdBetSportOption = 11,
                            IdBetSport = 4,
                            IdBetSportType = 3,
                            IdBetStatus = 1,
                            Odds = 3f
                        },
                        new
                        {
                            IdBetSportOption = 12,
                            IdBetSport = 4,
                            IdBetSportType = 2,
                            IdBetStatus = 1,
                            Odds = 1.7f
                        });
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetSportType", b =>
                {
                    b.Property<int>("IdBetSportType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBetSportType"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.HasKey("IdBetSportType")
                        .HasName("BetSportType_pk");

                    b.ToTable("BetSportType", (string)null);

                    b.HasData(
                        new
                        {
                            IdBetSportType = 1,
                            Name = "Wygra 1 drużyna"
                        },
                        new
                        {
                            IdBetSportType = 2,
                            Name = "Wygra 2 drużyna"
                        },
                        new
                        {
                            IdBetSportType = 3,
                            Name = "Remis"
                        });
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetStatus", b =>
                {
                    b.Property<int>("IdBetStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBetStatus"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.HasKey("IdBetStatus")
                        .HasName("BetStatus_pk");

                    b.ToTable("BetStatus", (string)null);

                    b.HasData(
                        new
                        {
                            IdBetStatus = 1,
                            Status = "Nierozpoczęto"
                        },
                        new
                        {
                            IdBetStatus = 2,
                            Status = "W trakcie"
                        },
                        new
                        {
                            IdBetStatus = 3,
                            Status = "Wygrany"
                        },
                        new
                        {
                            IdBetStatus = 4,
                            Status = "Przegrany"
                        });
                });

            modelBuilder.Entity("MAS.Backend.Entities.Coupon", b =>
                {
                    b.Property<int>("IdCoupon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCoupon"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<double>("PotentialWin")
                        .HasColumnType("float");

                    b.Property<double>("TotalRate")
                        .HasColumnType("float");

                    b.HasKey("IdCoupon")
                        .HasName("Coupon_pk");

                    b.ToTable("Coupon", (string)null);
                });

            modelBuilder.Entity("MAS.Backend.Entities.CouponOffer", b =>
                {
                    b.Property<int>("IdCouponOffer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCouponOffer"));

                    b.Property<int>("IdCoupon")
                        .HasColumnType("int");

                    b.Property<int>("IdOffer")
                        .HasColumnType("int");

                    b.HasKey("IdCouponOffer", "IdCoupon", "IdOffer")
                        .HasName("CouponOffer_pk");

                    b.HasIndex("IdCoupon");

                    b.HasIndex("IdOffer");

                    b.ToTable("CouponOffer", (string)null);
                });

            modelBuilder.Entity("MAS.Backend.Entities.Offer", b =>
                {
                    b.Property<int>("IdOffer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOffer"));

                    b.Property<float>("Bonus")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("IdOffer")
                        .HasName("Offer_pk");

                    b.ToTable("Offer", (string)null);
                });

            modelBuilder.Entity("MAS.Backend.Entities.Player", b =>
                {
                    b.Property<int>("IdPlayer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("IdPlayer")
                        .HasName("Player_pk");

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("MAS.Backend.Entities.PlayerBet", b =>
                {
                    b.Property<int>("IdPlayerBet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlayerBet"));

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<int>("IdCoupon")
                        .HasColumnType("int");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.HasKey("IdPlayerBet", "IdUser", "IdCoupon")
                        .HasName("PlayerBet_pk");

                    b.HasIndex("IdCoupon");

                    b.HasIndex("IdUser");

                    b.ToTable("PlayerBet", (string)null);
                });

            modelBuilder.Entity("MAS.Backend.Entities.Transaction", b =>
                {
                    b.Property<int>("IdTransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTransaction"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdAccount")
                        .HasColumnType("int");

                    b.Property<int>("IdTransactionType")
                        .HasColumnType("int");

                    b.HasKey("IdTransaction")
                        .HasName("Transaction_pk");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdTransactionType");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("MAS.Backend.Entities.TransactionType", b =>
                {
                    b.Property<int>("IdTransactionType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTransactionType"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.HasKey("IdTransactionType")
                        .HasName("TransactionType_pk");

                    b.ToTable("TransactionType", (string)null);

                    b.HasData(
                        new
                        {
                            IdTransactionType = 1,
                            Type = "Wypłata"
                        },
                        new
                        {
                            IdTransactionType = 2,
                            Type = "Wpłata"
                        });
                });

            modelBuilder.Entity("MAS.Backend.Entities.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("Pesel")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("RefreshTokenExpiration")
                        .HasColumnType("datetime");

                    b.HasKey("IdUser")
                        .HasName("User_pk");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("MAS.Backend.Entities.Account", b =>
                {
                    b.HasOne("MAS.Backend.Entities.User", "IdUserNavigation")
                        .WithOne("Account")
                        .HasForeignKey("MAS.Backend.Entities.Account", "IdAccount")
                        .IsRequired()
                        .HasConstraintName("Account_User");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("MAS.Backend.Entities.Address", b =>
                {
                    b.HasOne("MAS.Backend.Entities.User", "IdUserNavigation")
                        .WithMany("Addresses")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("Address_User");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("MAS.Backend.Entities.Admin", b =>
                {
                    b.HasOne("MAS.Backend.Entities.User", "IdAdminNavigation")
                        .WithOne("Admin")
                        .HasForeignKey("MAS.Backend.Entities.Admin", "IdAdmin")
                        .IsRequired()
                        .HasConstraintName("Admin_User");

                    b.Navigation("IdAdminNavigation");
                });

            modelBuilder.Entity("MAS.Backend.Entities.Bet", b =>
                {
                    b.HasOne("MAS.Backend.Entities.BetEsport", "IdBetEsportNavigation")
                        .WithMany("Bets")
                        .HasForeignKey("IdBetEsport")
                        .HasConstraintName("Bet_BetEsport");

                    b.HasOne("MAS.Backend.Entities.BetSport", "IdBetSportNavigation")
                        .WithMany("Bets")
                        .HasForeignKey("IdBetSport")
                        .HasConstraintName("Bet_BetSport");

                    b.Navigation("IdBetEsportNavigation");

                    b.Navigation("IdBetSportNavigation");
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetCoupon", b =>
                {
                    b.HasOne("MAS.Backend.Entities.BetEsportOption", "IdBetEsportOptionNavigation")
                        .WithMany("BetCoupons")
                        .HasForeignKey("IdBetEsportOption")
                        .HasConstraintName("BetCoupon_BetEsportOption");

                    b.HasOne("MAS.Backend.Entities.BetSportOption", "IdBetSportOptionNavigation")
                        .WithMany("BetCoupons")
                        .HasForeignKey("IdBetSportOption")
                        .HasConstraintName("BetCoupon_BetSportOption");

                    b.HasOne("MAS.Backend.Entities.Coupon", "IdCouponNavigation")
                        .WithMany("BetCoupons")
                        .HasForeignKey("IdCoupon")
                        .IsRequired()
                        .HasConstraintName("BetCoupon_Coupon");

                    b.Navigation("IdBetEsportOptionNavigation");

                    b.Navigation("IdBetSportOptionNavigation");

                    b.Navigation("IdCouponNavigation");
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetEsportOption", b =>
                {
                    b.HasOne("MAS.Backend.Entities.BetEsport", "IdBetEsportNavigation")
                        .WithMany("BetEsportOptions")
                        .HasForeignKey("IdBetEsport")
                        .IsRequired()
                        .HasConstraintName("BetEsportOption_BetEsport");

                    b.HasOne("MAS.Backend.Entities.BetEsportType", "IdBetEsportTypeNavigation")
                        .WithMany("BetEsportOptions")
                        .HasForeignKey("IdBetEsportType")
                        .IsRequired()
                        .HasConstraintName("BetEsportOption_BetEsportType");

                    b.HasOne("MAS.Backend.Entities.BetStatus", "IdBetStatusNavigation")
                        .WithMany("BetEsportOptions")
                        .HasForeignKey("IdBetStatus")
                        .IsRequired()
                        .HasConstraintName("BetEsportOption_BetStatus");

                    b.Navigation("IdBetEsportNavigation");

                    b.Navigation("IdBetEsportTypeNavigation");

                    b.Navigation("IdBetStatusNavigation");
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetSportOption", b =>
                {
                    b.HasOne("MAS.Backend.Entities.BetSport", "IdBetSportNavigation")
                        .WithMany("BetSportOptions")
                        .HasForeignKey("IdBetSport")
                        .IsRequired()
                        .HasConstraintName("BetSportTypeOdds_BetSport");

                    b.HasOne("MAS.Backend.Entities.BetSportType", "IdBetSportTypeNavigation")
                        .WithMany("BetSportOptions")
                        .HasForeignKey("IdBetSportType")
                        .IsRequired()
                        .HasConstraintName("BetSportTypeOdds_BetSportType");

                    b.HasOne("MAS.Backend.Entities.BetStatus", "IdBetStatusNavigation")
                        .WithMany("BetSportOptions")
                        .HasForeignKey("IdBetStatus")
                        .IsRequired()
                        .HasConstraintName("BetSportTypeOdds_BetStatus");

                    b.Navigation("IdBetSportNavigation");

                    b.Navigation("IdBetSportTypeNavigation");

                    b.Navigation("IdBetStatusNavigation");
                });

            modelBuilder.Entity("MAS.Backend.Entities.CouponOffer", b =>
                {
                    b.HasOne("MAS.Backend.Entities.Coupon", "IdCouponNavigation")
                        .WithMany("CouponOffers")
                        .HasForeignKey("IdCoupon")
                        .IsRequired()
                        .HasConstraintName("CouponOffer_Coupon");

                    b.HasOne("MAS.Backend.Entities.Offer", "IdOfferNavigation")
                        .WithMany("CouponOffers")
                        .HasForeignKey("IdOffer")
                        .IsRequired()
                        .HasConstraintName("CouponOffer_Offer");

                    b.Navigation("IdCouponNavigation");

                    b.Navigation("IdOfferNavigation");
                });

            modelBuilder.Entity("MAS.Backend.Entities.Player", b =>
                {
                    b.HasOne("MAS.Backend.Entities.User", "IdPlayerNavigation")
                        .WithOne("Player")
                        .HasForeignKey("MAS.Backend.Entities.Player", "IdPlayer")
                        .IsRequired()
                        .HasConstraintName("Player_User");

                    b.Navigation("IdPlayerNavigation");
                });

            modelBuilder.Entity("MAS.Backend.Entities.PlayerBet", b =>
                {
                    b.HasOne("MAS.Backend.Entities.Coupon", "IdCouponNavigation")
                        .WithMany("PlayerBets")
                        .HasForeignKey("IdCoupon")
                        .IsRequired()
                        .HasConstraintName("PlayerBet_Coupon");

                    b.HasOne("MAS.Backend.Entities.User", "IdUserNavigation")
                        .WithMany("PlayerBets")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("PlayerBet_User");

                    b.Navigation("IdCouponNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("MAS.Backend.Entities.Transaction", b =>
                {
                    b.HasOne("MAS.Backend.Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("IdAccount")
                        .IsRequired()
                        .HasConstraintName("Transaction_Account");

                    b.HasOne("MAS.Backend.Entities.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("IdTransactionType")
                        .IsRequired()
                        .HasConstraintName("Transaction_TransactionType");

                    b.Navigation("Account");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("MAS.Backend.Entities.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetEsport", b =>
                {
                    b.Navigation("BetEsportOptions");

                    b.Navigation("Bets");
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetEsportOption", b =>
                {
                    b.Navigation("BetCoupons");
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetEsportType", b =>
                {
                    b.Navigation("BetEsportOptions");
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetSport", b =>
                {
                    b.Navigation("BetSportOptions");

                    b.Navigation("Bets");
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetSportOption", b =>
                {
                    b.Navigation("BetCoupons");
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetSportType", b =>
                {
                    b.Navigation("BetSportOptions");
                });

            modelBuilder.Entity("MAS.Backend.Entities.BetStatus", b =>
                {
                    b.Navigation("BetEsportOptions");

                    b.Navigation("BetSportOptions");
                });

            modelBuilder.Entity("MAS.Backend.Entities.Coupon", b =>
                {
                    b.Navigation("BetCoupons");

                    b.Navigation("CouponOffers");

                    b.Navigation("PlayerBets");
                });

            modelBuilder.Entity("MAS.Backend.Entities.Offer", b =>
                {
                    b.Navigation("CouponOffers");
                });

            modelBuilder.Entity("MAS.Backend.Entities.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MAS.Backend.Entities.User", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("Addresses");

                    b.Navigation("Admin");

                    b.Navigation("Player");

                    b.Navigation("PlayerBets");
                });
#pragma warning restore 612, 618
        }
    }
}
